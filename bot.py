# üöÄ ONBOARDING-–ë–û–¢ –î–õ–Ø –°–¢–ê–ñ–Å–†–û–í
# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –ø—Ä–æ–≤–µ—Ä–∫–∏ + —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 9:00 –ú–°–ö
# –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render 24/7

import os
import logging
import re
from datetime import datetime, date, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    ExtBot,
)
import gspread
from google.oauth2.service_account import Credentials as ServiceAccountCredentials
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CREDENTIALS_FILE = 'credentials.json'  # –±—É–¥–µ—Ç –≤ Render –∫–∞–∫ Secret File
SHEET_ID = os.getenv("SHEET_ID")       # —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ ===
def get_sheet():
    try:
        creds = ServiceAccountCredentials.from_service_account_file(
            CREDENTIALS_FILE,
            scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        client = gspread.authorize(creds)
        sheet = client.open_by_key(SHEET_ID)
        return sheet.worksheet("–°—Ç–∞–∂–µ—Ä—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ: {e}")
        raise

# === –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ ===
INPUT_NAME, INPUT_PHONE, SELECT_ROLE, INPUT_START_DATE = range(4)
ROLES = ["–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"]

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞) ===
def is_valid_name(text):
    return bool(re.fullmatch(r'[–∞-—è–ê-–Ø—ë–Å\s]+', text)) and len(text.strip().split()) >= 2

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
def is_valid_phone(text):
    pattern = r'^(\+7|7|8)?[\s\-()]*[9]\d{2}[\s\-()]*\d{3}[\s\-()]*\d{2}[\s\-()]*\d{2}$'
    return bool(re.match(pattern, text.strip()))

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì) ===
def is_valid_date(text):
    for fmt in ('%d.%m.%Y', '%d/%m/%Y'):
        try:
            return datetime.strptime(text.strip(), fmt).date()
        except ValueError:
            continue
    return None

# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ –§–ò–û ===
def extract_first_name(full_name):
    parts = full_name.strip().split()
    if len(parts) >= 2 and re.match(r'[–∞-—è–ê-–Ø—ë–Å]', parts[1]):
        return parts[1].capitalize()
    return parts[0].capitalize()

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å—Ç–∞–∂—ë—Ä–æ–≤!\n"
        "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è."
    )
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
    return INPUT_NAME

# === –í–≤–æ–¥ –§–ò–û —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ===
async def input_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()
    if not is_valid_name(fio):
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ, –º–∏–Ω–∏–º—É–º –¥–≤–µ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω)."
        )
        return INPUT_NAME

    context.user_data['fio'] = fio
    context.user_data['first_name'] = extract_first_name(fio)

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç):")
    return INPUT_PHONE

# === –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ===
async def input_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not is_valid_phone(phone):
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "+7 912 345-67-89\n"
            "89123456789\n"
            "7 (912) 345 67 89"
        )
        return INPUT_PHONE

    context.user_data['phone'] = phone
    keyboard = [[KeyboardButton(role)] for role in ROLES]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", reply_markup=reply_markup)
    return SELECT_ROLE

# === –í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ ===
async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = update.message.text.strip()
    if role not in ROLES:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return SELECT_ROLE

    context.user_data['role'] = role
    first_name = context.user_data['first_name']

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {first_name}!\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì:"
    )
    return INPUT_START_DATE

# === –í–≤–æ–¥ –¥–∞—Ç—ã 1-–≥–æ –¥–Ω—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ===
async def input_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_date = update.message.text.strip()
    parsed_date = is_valid_date(raw_date)

    if not parsed_date:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î/–ú–ú/–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.08.2025)"
        )
        return INPUT_START_DATE

    if parsed_date < date.today():
        await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
        return INPUT_START_DATE

    context.user_data['start_date'] = parsed_date.isoformat()
    user = update.effective_user
    fio = context.user_data['fio']
    role = context.user_data['role']
    tg_nickname = f"@{user.username}" if user.username else f"ID{user.id}"
    chat_id = str(user.id)

    try:
        worksheet = get_sheet()
        new_row = [
            chat_id,
            fio,
            role,
            tg_nickname,
            str(date.today()),
            parsed_date.isoformat(),
            "",
        ] + [""] * 15

        worksheet.append_row(new_row)
        first_name = context.user_data['first_name']

        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {first_name}!\n"
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *{role}*.\n"
            f"–ü–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: *{raw_date}*\n\n"
            f"–°–∫–æ—Ä–æ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üåû\n"
            f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR.")

    return ConversationHandler.END

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è ===
def get_welcome_message(name):
    return (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n"
        "–û—Ç –ª–∏—Ü–∞ –°–î–≠–ö –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! üéâ\n"
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å—ë –ø—Ä–æ—à–ª–æ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è, –¥–µ—Ä–∂–∏ —á–µ–∫–ª–∏—Å—Ç –£—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è üìã\n\n"
        "1. –ü—Ä–∏–¥—É–º–∞–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ üë®‚Äçüíª, —á—Ç–æ–±—ã –±—ã—Ç—å –±–æ–ª–µ–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º, "
        "—Å–æ–≤–µ—Ç—É—é –Ω–∞–ø–∏—Å–∞—Ç—å –æ —Ç–æ–º, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, –∫–∞–∫–∏–µ —É —Ç–µ–±—è 2-3 —Å—É–ø–µ—Ä—Å–∏–ª—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–±–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç ü¶∏‚Äç‚ôÇÔ∏è ‚Äî "
        "—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å—Å—è üòÑ\n"
        "2. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –≤–æ—Ç—Å–∞–ø–µ, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ—Å—Ç–∞–≤—å —Å–≤–æ—é —Å–∞–º—É—é –∫—Ä—É—Ç—É—é —Ñ–æ—Ç–∫—É, –≥–¥–µ —Ç—ã –ª—É—á—à–µ –≤—Å–µ—Ö! ü•≥\n"
        "3. –°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—à–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã üöÄ. –ó–∞–π–¥–∏ –Ω–∞ –°–î–≠–ö Space üåê –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫—Ä—É—Ç–∞–Ω–∏ –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã üé°, "
        "–∞ –∑–∞—Ç–µ–º ‚Äî –ø–æ—Å—Ç–∞–≤—å —Ñ–æ—Ç–æ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É üôÇ\n"
        "4. –ü–æ –ø—Ä–∏–±—ã—Ç–∏–∏ –Ω–∞ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –ø–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ —Å–≤–æ–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º üë®‚Äçüè´, –æ–Ω —É–∂–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥—ë–Ω –∏ –∂–¥—ë—Ç —Ç–µ–±—è! üòâ\n"
        "5. –¢–µ–±—è –∂–¥—ë—Ç —ç–∫—Å–∫—É—Ä—Å–∏—è –≤ –∑–∞–∫—É–ª–∏—Å—å–µ –ü–í–ó, –æ—Ç–Ω–µ—Å–∏—Å—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ üëÄ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—Å—ë –∑–∞–ø–æ–º–Ω–∏—Ç—å\n"
        "6. –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞ üïí\n"
        "7. –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º üìú, —ç—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ –ë–∏–±–ª–∏—è –°–î–≠–ö (–Ω—É –æ–æ–æ–æ–æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç) üìñ\n"
        "8. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –±—É–¥—å —Å–æ–±–æ–π üôå, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—è–≤–ª—è–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –∏ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üèÜ\n"
        "9. –í –∫–æ–Ω—Ü–µ –¥–Ω—è –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–æ –∏—Ç–æ–≥–∞–º –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è!\n\n"
        "–£—Å–ø–µ—Ö–æ–≤! üôå\n"
        "–Ø –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, –µ—Å–ª–∏ –±—É–¥—É—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –ø–∏—à–∏! üí¨\n\n"
        "P.S. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! ‚ù§Ô∏è‚Äçüî•üöÄ"
    )

# === –§—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞, –∫—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ===
def send_welcome_messages():
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è...")
    try:
        worksheet = get_sheet()
        rows = worksheet.get_all_values()
        today_str = datetime.now(MOSCOW_TZ).date().isoformat()

        for row in rows[1:]:
            if len(row) < 6:
                continue
            chat_id = row[0]
            start_date = row[5]
            fio = row[1]
            if start_date == today_str:
                name = extract_first_name(fio)
                bot = ExtBot(token=TELEGRAM_TOKEN)
                try:
                    bot.send_message(
                        chat_id=int(chat_id),
                        text=get_welcome_message(name),
                        parse_mode='Markdown'
                    )
                    logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {chat_id}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {chat_id}: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ===
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = BlockingScheduler(timezone=MOSCOW_TZ)
    scheduler.add_job(send_welcome_messages, CronTrigger(hour=9, minute=0))  # 9:00 –ú–°–ö
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –ú–°–ö")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            INPUT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_name)],
            INPUT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_phone)],
            SELECT_ROLE: [MessageHandler(filters.TEXT & filters.Regex(f"^({'|'.join(ROLES)})$"), select_role)],
            INPUT_START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_start_date)],
        },
        fallbacks=[]
    )
    application.add_handler(conv_handler)

    logger.info("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    from threading import Thread
    Thread(target=application.run_polling, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()

if __name__ == "__main__":
    main()